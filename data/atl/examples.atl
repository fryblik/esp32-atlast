\ This file is part of Interactive Atlast Forth Interpreter For ESP32.
\ Copyright (C) 2021  Vojtech Fryblik <433796@mail.muni.cz>

\ This program is free software: you can redistribute it and/or modify
\ it under the terms of the GNU General Public License as published by
\ the Free Software Foundation, either version 3 of the License, or
\ (at your option) any later version.

\ This program is distributed in the hope that it will be useful,
\ but WITHOUT ANY WARRANTY; without even the implied warranty of
\ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\ GNU General Public License for more details.

\ You should have received a copy of the GNU General Public License
\ along with this program.  If not, see <https://www.gnu.org/licenses/>.


\ Requires `pins.atl` (should be run automatically on startup).


\ Example 1: Blinking green LED 3 times

\ Helper functions
: 1s 1000 delay_ms ; \ 1-second delay
: on high pinw ;     \ switch pin on
: off low pinw ;     \ switch pin off

\ Function: Turn led on for 1s and off for 1s
: blink
    led output pinm \ Configure led pin for output
    led on
    1s
    led off
    1s
;

\ Function: Execute BLINK 3 times
: blink3 blink blink blink ;



\ Example 2: Control LED with the B4 button

\ Function: B4 controls the LED, B3 ends execution
: B4toLED
    \ Configure GPIOs:
    b3 input pinm
    b4 input pinm
    led output pinm
    \ Loop indefinitely:
    begin
        b4 pinr \ Push button value onto stack
        \ Invert value on stack:
        if
            low
        else
            high
        then
        led swap pinw   \ Assign value to LED (value goes second)
        10 delay_ms     \ We don't need to be too precise
    b3 pinr low = until \ Loop until button B3 turns low
;



\ Example 3: Pulse-width modulation

\ PWM variables
variable pwm-duty
variable pwm-offduty
variable pwm-cycle
variable pwm-pin
variable pwm-duration

\ Function: [pin] [duty ms] [cycle duration ms] PWM-INF
: PWM-INFINITE
    pwm-cycle ! pwm-duty ! pwm-pin !    \ Save values from stack
    pwm-cycle @ pwm-duty @ - \ Subtract pwm-duty value from pwm-cycle value
    pwm-offduty !            \  and save the result to pwm-offduty
    pwm-pin @ output pinm    \ Get pin number and set its mode to output
    begin
        pwm-pin @ on
        pwm-duty @ delay_ms
        pwm-pin @ off
        pwm-offduty @ delay_ms
    0 until                  \ Run PWM loop indefinitely
;

\ Function: [pin] [duty ms] [cycle duration ms] [approx. run duration ms] PWM
: PWM
    pwm-duration ! pwm-cycle ! pwm-duty ! pwm-pin ! \ Save values from stack
    pwm-cycle @ pwm-duty @ -    \ Subtract pwm-duty value from pwm-cycle value
    pwm-offduty !               \  and save the result to pwm-offduty
    pwm-pin @ output pinm       \ Get pin number and set its mode to output
    pwm-duration @ 0 do         \ Put duration value on stack and start loop
        pwm-pin @ on
        pwm-duty @ delay_ms
        pwm-pin @ off
        pwm-offduty @ delay_ms
        pwm-cycle @             \ Put loop step on stack
    +loop                       \ Run PWM loop
;



\ Example 4: Reading I2C accelerometer data

\ Function: ACCEL-INFINITE
: ACCEL-INFINITE
\ Set accelerometer scale:
    \ Range +-16g: 0x18 (24 decimal)
    \ Register address for accel config: 0x1C (28 decimal)
    \ Byte count: 2
    \ MPU9250 address: 0x68 (104 decimal)
    \ Write to I2C & drop return value
    24 28 2 104 i2cwrite drop
    begin

    \ Select accelerometer data register:
        \ Register address (ACCEL_XOUT_H): 0x3B (59 decimal)
        \ Byte count: 1
        \ MPU9250 address: 0x68 (104 decimal)
        \ Write to I2C & drop return value
        59 1 104 i2cwrite drop

    \ Request and read 3Ã—16-bit g-force values (6 bytes):
        \ Requested byte count: 6
        \ MPU9250 address: 0x68 (104 decimal)
        \ Read from I2C
        6 104 i2cread

    \ Convert and print received data from stack:
        \ Range +-16g: 16
        16 parseaccel

    \ Wait for one second:
        1000 delay_ms
    0 until \ Run loop indefinitely
;